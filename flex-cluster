#!/usr/bin/env python

# credit goes to https://git.cs.colorado.edu/caldweba/cloudlab-accelio
# for publishing scripts used as the template for this.

import geni.portal as portal
import geni.rspec.pg as PG
import geni.rspec.igext as IG
from lxml import etree as ET

# Create our in-memory model of the RSpec -- the resources we're going to request
# in our experiment, and their configuration.
rspec = PG.Request()

# This geni-lib script is designed to run in the CloudLab Portal.
pc = portal.Context()

# Define parameters; see the help docs in geni-lib to learn how to modify.
pc.defineParameter(
	"nodeCount", "Number of nodes", portal.ParameterType.INTEGER, 1
)

pc.defineParameter(
	"archType",
	"Architecture Type",
	portal.ParameterType.STRING,
	"x86_64", [("arm", "ARM"), ("x86_64", "Intel x86_64")],
	longDescription=
	"Either ARM64 (X-GENE, aarch64) or Intel x86_64 for the system architecture type."
)

pc.defineParameter(
	"OSType",
	"OS Type",
	portal.ParameterType.STRING,
	"ubuntu", [("centos", "CentOS 7.1"), ("ubuntu", "Ubuntu 16.04")],
	longDescription="Choose either CentOS 7.1 or Ubuntu for the OS distribution."
)

pc.defineParameter(
	"hwType",
	"Hardware Type",
	portal.ParameterType.STRING,
	"c220g1", [
		("c220g1", "c220g1 (Wisc)"),
		("c220g2", "c220g2 (Wisc)"),
		("c6320", "c6320 (Clemson)"),
		("c8220", "c8220 (Clemson)"),
		("m400", "m400 (Utah)"),
		("m510", "m510 (Utah)"),
	],
	longDescription="Select hardware from the intended cluster"
)

pc.defineParameter(
	"fullBW",
	"Ensure Full Bandwidth",
	portal.ParameterType.BOOLEAN,
	False,
	advanced=True,
	longDescription=
	"When provisioning the cluster, ensure that all links are able run at max bandwidth. This can only be used with small clusters."
)

pc.defineParameter(
	"hostBaseName",
	"Base name of compute node(s)",
	portal.ParameterType.STRING,
	"node",
	advanced=True,
	longDescription=
	"The base string of the short name of the nodes (node names will look like node-0, node-1, ...). You shold leave this alone unless you really want the hostname to change."
)

pc.defineParameter(
	"ipAllocationStrategy",
	"IP Addressing",
	portal.ParameterType.STRING,
	"cloudlab", [("cloudlab", "CloudLab"), ("script", "This Script")],
	longDescription="Script generation is not implemented. Use cloudlab.",
	advanced=True
)

# Get any input parameter values that will override our defaults.
params = pc.bindParameters()

# Verify our parameters and throw errors.

if params.OSType == 'centos' and params.archType == 'arm':
	perr = portal.ParameterError(
		"ARM architecture type is not compatible with CentOS disk image. Please choose Ubuntu with ARM architecture type.",
		['OSType', 'archType']
	)
	pc.reportError(perr)

generateIPs = False
if params.ipAllocationStrategy == 'script':
	generateIPs = True

# Give the library a chance to return nice JSON-formatted exception(s) and/or
# warnings; this might sys.exit().
pc.verifyParameters()

tourDescription = "A configurable number of nodes with a two 1TB disks attached at /mnt/cdata0 and /mnt/cdata1."

tourInstructions = "Log in with you cloudlab account using the SSH key you uploaded. Gain root access using sudo."

# Setup the Tour info with the above description and instructions.
tour = IG.Tour()
tour.Description(IG.Tour.TEXT, tourDescription)
tour.Instructions(IG.Tour.MARKDOWN, tourInstructions)
rspec.addTour(tour)

# Construct the disk image URNs we're going to set the various nodes to load.

x86_ubuntu_disk_image = 'urn:publicid:IDN+emulab.net+image+emulab-ops:UBUNTU16-64-STD'
x86_centos_disk_image = 'urn:publicid:IDN+emulab.net+image+emulab-ops:CENTOS71-64-STD'
arm_disk_image = 'urn:publicid:IDN+utah.cloudlab.us+image+emulab-ops:UBUNTU16-64-ARM'

if params.OSType == 'centos':
	chosenDiskImage = x86_centos_disk_image
elif params.OSType == 'ubuntu':
	if params.archType == 'x86_64':
		chosenDiskImage = x86_ubuntu_disk_image
	elif params.archType == 'arm':
		chosenDiskImage = arm_disk_image

lnk = PG.LAN()
if not params.fullBW:
	lnk.best_effort = True
	lnk.link_multiplexing = True

for i in range(params.nodeCount):
	nname = "%s-%d" % (params.hostBaseName, i)
	node = PG.RawPC(nname)
	node.disk_image = chosenDiskImage
	node.hardware_type = params.hwType
	# this is weird but this call adds the blockstore to the node
	bs0 = node.Blockstore("bs0" + str(i), "/mnt/cdata0")
	bs0.size = "1024GB"
	bs1 = node.Blockstore("bs1" + str(i), "/mnt/cdata1")
	bs1.size = "1024GB"
	if params.nodeCount > 1:
		iface = node.addInterface("iface-" + nname)
		lnk.addInterface(iface)
	#node.addService(PG.Install(url=TBURL, path="/tmp"))
	#node.addService(PG.Execute(shell="sh",command=TBCMD))
	rspec.addResource(node)

rspec.addResource(lnk)

# The following looks like a way to set env variables on the nodes.
# Explore using this if necessary.
#
# # Add our parameters to the request so we can get their values to our nodes.
# # The nodes download the manifest(s), and the setup scripts read the parameter
# # values when they run.
# class Parameters(PG.Resource):
# 	def _write(self, root):
# 		ns = "{http://www.protogeni.net/resources/rspec/ext/johnsond/1}"
# 		paramXML = "%sparameter" % (ns,)
#
# 		el = ET.SubElement(root,"%sprofile_parameters" % (ns,))
#
# 		param = ET.SubElement(el,paramXML)
# 		param.text = 'COMPUTENODES="%s"' % (nodeList,)
# 		param.text = 'MGMTLAN="%s"' % (mgmtlan.client_id,)
#
# 		return el
#
# parameters = Parameters()
# rspec.addResource(parameters)

pc.printRequestRSpec(rspec)
